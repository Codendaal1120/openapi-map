{
    "Callback Object": {
        "changelog": {
            "isNew": true
        },
        "allowExtension": true,
        "description": "A map of possible out-of band callbacks related to the parent operation. Each value in the map is a [Path Item Object](#pathItemObject) that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.",
        "fields": [{
            "name": "{expression}",
            "type": "Path Item Object",
            "noFollow": true,
            "description": "A Path Item Object used to define a callback request and expected responses. A [complete example](../examples/v3.0/callback-example.yaml) is available.\n"
        }]
    },
    "Components Object": {
        "description": "Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.",
        "allowExtension": true,
        "changelog": {
            "isNew": true,
            "details": "Contains former root `responses`, `parameters` (split into `parameters` and `requestBodies`) and `definitions` (as `schemas`)."
        },
        "fields": [{
            "name": "schemas",
            "type": "{Schema Object}",
            "changelog": {
                "isInfo": true,
                "details": "Replace root `definitions`"
            },
            "description": "An object to hold reusable [Schema Objects](#schemaObject)."
        }, {
            "name": "responses",
            "type": "{Response Object}",
            "changelog": {
                "isInfo": true,
                "details": "Replace root `responses`"
            },
            "description": "An object to hold reusable [Response Objects](#responseObject)."
        }, {
            "name": "parameters",
            "type": "{Parameter Object}",
            "changelog": {
                "isInfo": true,
                "details": "Replace root `parameters` (Only non body parameters, body ones are in `requestBodies`)."
            },
            "description": "An object to hold reusable [Parameter Objects](#parameterObject)."
        }, {
            "name": "examples",
            "type": "{Example Object}",
            "description": "An object to hold reusable [Example Objects](#exampleObject)."
        }, {
            "name": "requestBodies",
            "type": "{Request Body Object}",
            "changelog": {
                "isInfo": true,
                "details": "Partially replace root `parameters` (Body parameters only, others are in `parameters`)."
            },
            "description": "An object to hold reusable [Request Body Objects](#requestBodyObject)."
        }, {
            "name": "headers",
            "type": "{Header Object}",
            "description": "An object to hold reusable [Header Objects](#headerObject)."
        }, {
            "name": "securitySchemes",
            "type": "{Security Scheme Object}",
            "changelog": {
                "isInfo": true,
                "details": "Replace root `securityDefinitions`."
            },
            "description": "An object to hold reusable [Security Scheme Objects](#securitySchemeObject)."
        }, {
            "name": "links",
            "type": "{Link Object}",
            "description": "An object to hold reusable [Link Objects](#linkObject)."
        }, {
            "name": "callbacks",
            "type": "{Callback Object}",
            "description": "An object to hold reusable [Callback Objects](#callbackObject)."
        }]
    },
    "Contact Object": {
        "description": "Contact information for the exposed API.",
        "allowExtension": true,
        "fields": [{
            "name": "name",
            "type": "string",
            "description": "The identifying name of the contact person/organization."
        }, {
            "name": "url",
            "type": "string",
            "description": "The URL pointing to the contact information. MUST be in the format of a URL.\n"
        }, {
            "name": "email",
            "type": "string",
            "description": "The email address of the contact person/organization. MUST be in the format of an email address.\n"
        }]
    },
    "Discriminator Object": {
        "description": "When request bodies or response payloads may be one of a number of different schemas, a `discriminator` object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.\n\nWhen using the discriminator, _inline_ schemas will not be considered.\n\nThe discriminator attribute is legal only when using one of the composite keywords `oneOf`, `anyOf`, `allOf`.\n\nSee [Discrimitor Object](#discriminatorObject) for complete examples.\n",
        "allowExtension": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "propertyName",
            "type": "string",
            "required": true,
            "description": "The name of the property in the payload that will hold the discriminator value."
        }, {
            "name": "mapping",
            "type": "{propertyName value, string}",
            "description": "An object to hold mappings between payload values and schema names or references. \n\nIn scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional `mapping` definition MAY be used.\n\nSee [Discrimitor Object](#discriminatorObject) for complete examples.\n"
        }]
    },
    "Encoding Object": {
        "description": "A single encoding definition applied to a single schema property.",
        "allowExtension": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "contentType",
            "type": "string",
            "description": "The Content-Type for encoding a specific property. Default value depends on the property type: for `string` with `format` being `binary` – `application/octet-stream`; for other primitive types – `text/plain`; for `object` - `application/json`; for `array` – the default is defined based on the inner type. The value can be a specific media type (e.g. `application/json`), a wildcard media type (e.g. `image/*`), or a comma-separated list of the two types.\n"
        }, {
            "name": "headers",
            "type": "Header Object",
            "allowReference": true,
            "noFollow": true,
            "description": "A map allowing additional information to be provided as headers, for example `Content-Disposition`.  `Content-Type` is described separately and SHALL be ignored in this section. This property SHALL be ignored if the request body media type is not a `multipart`."
        }, {
            "name": "style",
            "type": "string",
            "description": "Describes how a specific property value will be serialized depending on its type.  See [Parameter Object](#parameterObject) for details on the [`style`](#parameterStyle) property. The behavior follows the same values as `query` parameters, including default values. This property SHALL be ignored if the request body media type is not `application/x-www-form-urlencoded`."
        }, {
            "name": "explode",
            "type": "boolean",
            "description": "When this is true, property values of type `array` or `object` generate separate parameters for each value of the array, or key-value-pair of the map.  For other types of properties this property has no effect. When [`style`](#encodingStyle) is `form`, the default value is `true`. For all other styles, the default value is `false`. This property SHALL be ignored if the request body media type is not `application/x-www-form-urlencoded`."
        }, {
            "name": "allowReserved",
            "type": "boolean",
            "description": "Determines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986](https://tools.ietf.org/html/rfc3986#section-2.2) `:/?#[]@!$&'()*+,;=` to be included without percent-encoding. The default value is `false`. This property SHALL be ignored if the request body media type is not `application/x-www-form-urlencoded`."
        }]
    },
    "Example Object": {
        "description": "In all cases, the example value is expected to be compatible with the type schema of its associated value. Tooling implementations MAY choose to validate compatibility automatically, and reject the example value(s) if incompatible.",
        "changelog": {
            "isNew": true
        },
        "allowExtension": true,
        "fields": [{
            "name": "summary",
            "type": "string",
            "description": "Short description for the example."
        }, {
            "name": "description",
            "type": "string",
            "description": "Long description for the example.",
            "md": "CommonMark"
        }, {
            "name": "value",
            "type": "Any",
            "description": "Embedded literal example. The `value` field and `externalValue` field are mutually exclusive. To represent examples of media types that cannot naturally represented in JSON or YAML, use a string value to contain the example, escaping where necessary."
        }]
    },
    "External Documentation Object": {
        "description": "Allows referencing an external resource for extended documentation.",
        "allowExtension": true,
        "fields": [{
            "name": "description",
            "type": "string",
            "description": "A short description of the target documentation.",
            "md": "CommonMark"
        }, {
            "name": "url",
            "type": "string",
            "description": "The URL for the target documentation. Value MUST be in the format of a URL.",
            "required": true
        }]
    },
    "Header Object": {
        "description": "The Header Object follows the structure of the [Parameter Object](#parameterObject) with the following changes:\n\n1. `name` MUST NOT be specified, it is given in the corresponding `headers` map.\n1. `in` MUST NOT be specified, it is implicitly in `header`.\n1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, [`style`](#parameterStyle)).\n\nNote: allowEmptyValue shouldn't be used too (only for query parameters)\n",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "Response headers are defined almost like parameters and can now be defined in `OpenAPI Object.components.headers` and reused with a `$ref`.",
            "deletedProperties": [{
                "name": "default",
                "replacedBy": "schema.default or content.{media type}.schema.default",
                "see": "Schema Object"
            }, {
                "name": "items",
                "replacedBy": "schema.items or content.{media type}.schema.items",
                "see": "Schema Object"
            }, {
                "name": "collectionFormat",
                "replacedBy": "schema.collectionFormat or content.{media type}.schema.collectionFormat",
                "see": "Schema Object"
            }, {
                "name": "maxItems",
                "replacedBy": "schema.maxItems or content.{media type}.schema.maxItems",
                "see": "Schema Object"
            }, {
                "name": "minItems",
                "replacedBy": "schema.minItems or content.{media type}.schema.minItems",
                "see": "Schema Object"
            }, {
                "name": "uniqueItems",
                "replacedBy": "schema.uniqueItems or content.{media type}.schema.uniqueItems",
                "see": "Schema Object"
            }, {
                "name": "format",
                "replacedBy": "schema.format or content.{media type}.schema.format",
                "see": "Schema Object"
            }, {
                "name": "enum",
                "replacedBy": "schema.enum or content.{media type}.schema.enum",
                "see": "Schema Object"
            }, {
                "name": "pattern",
                "replacedBy": "schema.pattern or content.{media type}.schema.pattern",
                "see": "Schema Object"
            }, {
                "name": "maxLength",
                "replacedBy": "schema.maxLength or content.{media type}.schema.maxLength",
                "see": "Schema Object"
            }, {
                "name": "minLength",
                "replacedBy": "schema.minLength or content.{media type}.schema.minLength",
                "see": "Schema Object"
            }, {
                "name": "maximum",
                "replacedBy": "schema.maximum or content.{media type}.schema.maximum",
                "see": "Schema Object"
            }, {
                "name": "exclusiveMaximum",
                "replacedBy": "schema.exclusiveMaximum or content.{media type}.schema.exclusiveMaximum",
                "see": "Schema Object"
            }, {
                "name": "minimum",
                "replacedBy": "schema.minimum or content.{media type}.schema.minimum",
                "see": "Schema Object"
            }, {
                "name": "exclusiveMinimum",
                "replacedBy": "schema.exclusiveMinimum or content.{media type}.schema.exclusiveMinimum",
                "see": "Schema Object"
            }, {
                "name": "multipleOf",
                "replacedBy": "schema.multipleOf or content.{media type}.schema.multipleOf",
                "see": "Schema Object"
            }]
        },
        "fields": [{
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "A brief description of the header. This could contain examples of use. CommonMark syntax can be used for rich text representation.    \n"
        }, {
            "name": "required",
            "type": "boolean",
            "description": "Determines whether this header is mandatory (always returnd). Its default value is false.\n"
        }, {
            "name": "deprecated",
            "type": "boolean",
            "description": "Specifies that a header is deprecated and SHOULD be transitioned out of usage.",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "<using style and schema>",
            "type": "Header Object Style Schema",
            "description": "The rules for serialization of the header are specified in one of two ways. For simpler scenarios, a [`style`](#parameterSchema) and [`schema`](#parameterStyle) can be used to describe the structure and syntax of the parameter."
        }, {
            "name": "<using content>",
            "type": "Header Object Content",
            "description": "For more complex scenarios, the [`content`](#parameterContent) property can define the media type and schema of the header. A header MUST contain either a `schema` property, or a `content` property, but not both. When example or examples are provided in conjunction with the `schema` object, the example MUST follow the prescribed serialization strategy for the header."
        }]
    },
    "Header Object Content": {
        "description": "For more complex scenarios, the [`content`](#parameterContent) property can define the media type and schema of the parameter. A parameter MUST contain either a `schema` property, or a `content` property, but not both. When example or examples are provided in conjunction with the `schema` object, the example MUST follow the prescribed serialization strategy for the parameter.",
        "fieldsGroup": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "content",
            "type": "{media type, Media Type Object}",
            "changelog": {
                "isNew": true,
                "details": "Replace operation's `consumes`."
            },
            "description": "A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry."
        }]
    },
    "Header Object Style Schema": {
        "description": "_Reminder: The Header Object follows the structure of the [Parameter Object](#parameterObject) with some adaptations. See [Header Object](#headerObject)._\n\nThe rules for serialization of the header are specified in one of two ways. For simpler scenarios, a [`style`](#parameterSchema) and [`schema`](#parameterStyle) can be used to describe the structure and syntax of the parameter.\n",
        "fieldsGroup": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "style",
            "type": "string",
            "changelog": {
                "isNew": true
            },
            "description": "Describes how the header value will be serialized depending on the type of the parameter value. Default value is `simple` (because it's a Header Object).\n"
        }, {
            "name": "explode",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "When this is true, headers values of type `array` or `object` generate separate parameters for each value of the array or key-value pair of the map.  For other types of headers this property has no effect. When [`style`](#parameterStyle) is `form`, the default value is `true`. For all other styles, the default value is `false`."
        }, {
            "name": "allowReserved",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "Determines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986](https://tools.ietf.org/html/rfc3986#section-2.2) `:/?#[]@!$&'()*+,;=` to be included without percent-encoding. This property only applies to parameters with an `in` value of `query`. The default value is `false`."
        }, {
            "name": "schema",
            "type": "Schema Object",
            "allowReference": true,
            "changelog": {
                "isNew": true
            },
            "description": "The schema defining the type used for the header."
        }, {
            "name": "example",
            "type": "Any",
            "allowReference": true,
            "changelog": {
                "isNew": true
            },
            "description": "Example of the media type.  The example SHOULD match the specified schema and encoding properties if present.  The `example` field is mutually exclusive of the `examples` field.  Furthermore, if referencing a `schema` which contains an example, the `example` value SHALL _override_ the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary."
        }, {
            "name": "examples",
            "type": "{Example Object}",
            "allowReference": true,
            "changelog": {
                "isNew": true
            },
            "description": "Examples of the media type.  Each example SHOULD contain a value in the correct format as specified in the parameter encoding.  The `examples` field is mutually exclusive of the `example` field.  Furthermore, if referencing a `schema` which contains an example, the `examples` value SHALL _override_ the example provided by the schema."
        }]
    },
    "Info Object": {
        "description": "Provides metadata about the API. The metadata can be used by the clients if needed.",
        "allowExtension": true,
        "fields": [{
            "name": "title",
            "type": "string",
            "required": true,
            "description": "The title of the application."
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "A short description of the application."
        }, {
            "name": "termsOfService",
            "type": "string",
            "description": "A URL to the Terms of Service for the API. MUST be in the format of a URL."
        }, {
            "name": "contact",
            "type": "Contact Object",
            "description": "The contact information for the exposed API."
        }, {
            "name": "licence",
            "type": "Licence Object",
            "description": "The license information for the exposed API."
        }, {
            "name": "version",
            "type": "string",
            "required": true,
            "description": "The version of the API definition (which is distinct from the OpenAPI specification version or the API implementation version)."
        }]
    },
    "Licence Object": {
        "description": "License information for the exposed API.",
        "allowExtension": true,
        "fields": [{
            "name": "name",
            "type": "string",
            "required": true,
            "description": "The license name used for the API."
        }, {
            "name": "url",
            "type": "string",
            "description": "A URL to the license used for the API. MUST be in the format of a URL.\n"
        }]
    },
    "Link Object": {
        "description": "The Link Object is responsible for defining a possible operation based on a single response.",
        "specificationAnchor": "link-object",
        "allowExtension": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "href",
            "type": "string",
            "description": "a relative or absolute URL to a linked resource. This field is mutually exclusive with the operationId field."
        }, {
            "name": "operationId",
            "type": "string",
            "description": "the name of an existing, resolvable OAS operation, as defined with a unique operationId. This field is mutually exclusive with the href field. Relative href values MAY be used to locate an existing Operation Object in the OAS."
        }, {
            "name": "parameters",
            "type": "Link Parameters Object",
            "description": "an object representing parameters to pass to an operation as specified with operationId or identified via href."
        }, {
            "name": "headers",
            "type": "Headers Object",
            "description": "an object representing headers to pass to the linked resource. Where conflicts occur between these headers, and those defined in the related operation, these headers override."
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "a description of the link, supports CommonMark syntax."
        }]
    },
    "Media Type Object": {
        "description": "Each Media Type Object provides schema and examples for the media type identified by its key.",
        "allowExtension": true,
        "changelog": {
            "isNew": true,
            "details": "Replace operation's `consumes` and `produces`"
        },
        "fields": [{
            "name": "schema",
            "type": "Schema Object",
            "description": "The schema defining the type used for the request body."
        }, {
            "name": "examples",
            "type": "{Example Object}",
            "allowReference": true,
            "description": "Example of the media type.  The example object SHOULD be in the correct format as specified by the media type.  The `example` field is mutually exclusive of the `examples` field.  Furthermore, if referencing a `schema` which contains an example, the `example` value SHALL _override_ the example provided by the schema."
        }, {
            "name": "example",
            "type": "Example Object",
            "allowReference": true,
            "description": "Examples of the media type.  Each example object SHOULD  match the media type and specified schema if present.  The `examples` field is mutually exclusive of the `example` field.  Furthermore, if referencing a `schema` which contains an example, the `examples` value SHALL _override_ the example provided by the schema."
        }, {
            "name": "encoding",
            "type": "{property name, Encoding Object}",
            "description": "A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. The encoding object SHALL only apply to `requestBody` objects when the media type is `multipart` or `application/x-www-form-urlencoded`."
        }]
    },
    "OpenAPI Object": {
        "name": "OpenAPI 3.0",
        "specificationAnchor": "oasObject",
        "description": "OpenAPI 3.0 top level object.\nThis is the root document object for the OpenAPI Specification document.\n",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "The new OpenAPI Specification version 3.0 offers many welcomed improvements and new features (see OpenAPI [blog post series about this](https://www.openapis.org/news/blogs/2016/10/tdc-structural-improvements-explaining-30-spec-part-2)).\n\nHere are the noticeable changes on top level (*navigate through the tree to see what happened on other levels*): \n- Bye bye `swagger` and hello `openapi`.\n- Reusable definitions are centralized in `components` making the document more consistent (the previous version mixed reusable and global definitions on the same level).\n",
            "deletedProperties": [{
                "name": "swagger",
                "replacedBy": "openapi",
                "see": "OpenAPI Object"
            }, {
                "name": "host",
                "replacedBy": "servers[].url",
                "see": "Server Object"
            }, {
                "name": "basePath",
                "replacedBy": "servers[].url",
                "see": "Server Object"
            }, {
                "name": "schemes",
                "replacedBy": "servers[].url",
                "see": "Server Object"
            }, {
                "name": "definitions",
                "replacedBy": "components.schemas",
                "see": "Components Object"
            }, {
                "name": "parameters",
                "replacedBy": "components.parameters and components.requestBodies",
                "see": "Components Object"
            }, {
                "name": "securityDefinitions",
                "replacedBy": "components.securitySchemas",
                "see": "Components Object"
            }, {
                "name": "consumes",
                "replacedBy": "Content Object.{media type}",
                "see": "Content Object"
            }, {
                "name": "produces",
                "replacedBy": "Content Object.{media type}",
                "see": "Content Object"
            }]
        },
        "fields": [{
            "name": "openapi",
            "type": "string",
            "required": true,
            "changelog": {
                "isNew": true,
                "details": "Replace the `swagger` property"
            },
            "description": "This string MUST be the [semantic version number](https://semver.org/spec/v2.0.0.html) of the [OpenAPI Specification version](#versions) that the OpenAPI document uses. The `openapi` field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. This is *not* related to the API [`info.version`](#infoVersion) string.\n"
        }, {
            "name": "info",
            "type": "Info Object",
            "required": true,
            "description": "Provides metadata about the API. The metadata MAY be used by tooling as required."
        }, {
            "name": "servers",
            "type": "[Server Object]",
            "description": "An array of Server Objects, which provide connectivity information to a target server. If the `servers` property is not provided, or is an empty array, the default value would be a `Server Object` with a `url` value of `/`.",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "paths",
            "type": "Paths Object",
            "required": true,
            "description": "The available paths and operations for the API."
        }, {
            "name": "components",
            "type": "Components Object",
            "description": "An element to hold various schemas for the specification.",
            "changelog": {
                "isNew": true,
                "details": "Replace `definitions`, `parameters` and `securityDefinitions`"
            }
        }, {
            "name": "security",
            "type": "[Security Requirement Object]",
            "description": "A declaration of which security mechanisms can be used across the API. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. Individual operations can override this definition."
        }, {
            "name": "tags",
            "type": "[Tag Object]",
            "description": "A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique."
        }, {
            "name": "externalDocs",
            "type": "External Documentation Object",
            "description": "Additional external documentation."
        }]
    },
    "Operation Object": {
        "description": "Describes a single API operation on a path.",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "- Better and consistent parameters description by using `Schema Object` even for atomic ones.\n- Request body is now defined separetely (`requestBody`).\n- Async/event API design is possible thanks to `callbacks` (webhooks).\n- The `servers` property enhance documentation and test possibilities (also available on top and path levels).\n",
            "deletedProperties": [{
                "name": "produces",
                "replacedBy": "responses.{HTTP Status}.content.{media type}",
                "specificationAnchor": "mediaTypeObject"
            }, {
                "name": "consumes",
                "replacedBy": "requestBody.content.{media type}",
                "specificationAnchor": "mediaTypeObject"
            }, {
                "name": "schemes",
                "replacedBy": "servers",
                "specificationAnchor": "Server Object"
            }]
        },
        "fields": [{
            "name": "tags",
            "type": "[string]",
            "description": "A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier."
        }, {
            "name": "summary",
            "type": "string",
            "description": "A short summary of what the operation does. For maximum readability in editing or documentation generation tools, this field SHOULD be less than 120 characters."
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "A verbose explanation of the operation behavior. CommonMark syntax can be used for rich text representation."
        }, {
            "name": "externalDocs",
            "type": "External Documentation Object",
            "description": "Additional external documentation for this operation."
        }, {
            "name": "operationId",
            "type": "string",
            "description": "Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions."
        }, {
            "name": "parameters",
            "type": "[Parameter Object]",
            "allowReference": true,
            "changelog": {
                "isModified": true,
                "details": "Does not describe body parameter anymore (see requestBody)"
            },
            "description": "A list of parameters that are applicable for this operation. If a parameter is already defined at the [Path Item](#pathItemParameters), the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a [name](#parameterName) and [location](#parameterIn). The list can use the [Reference Object](#referenceObject) to link to parameters that are defined at the [OpenAPI Object's components/parameters](#componentsParameters)."
        }, {
            "name": "requestBody",
            "type": "Request Body Object",
            "allowReference": true,
            "required": true,
            "changelog": {
                "isNew": true,
                "details": "Replace `parameters` with `in = body`"
            },
            "description": "The request body applicable for this operation.  The `requestBody` is only supported in HTTP methods where the HTTP 1.1 specification [RFC7231](https://tools.ietf.org/html/rfc7231#section-4.3.1) has explicitly defined semantics for request bodies.  In other cases where the HTTP spec is vague, `requestBody` SHALL be ignored by consumers."
        }, {
            "name": "responses",
            "type": "Responses Object",
            "required": true,
            "descriptions": "The list of possible responses as they are returned from executing this operation."
        }, {
            "name": "callbacks",
            "type": "{expression idenfiying URL, Callback Object}",
            "changelog": {
                "isNew": true
            },
            "description": "A map of possible out-of band callbacks related to the parent operation. The key is a unique identifier for the Callback Object. Each value in the map is a [Callback Object](#callbackObject) that describes a request that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation."
        }, {
            "name": "deprecated",
            "type": "boolean",
            "description": "Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation. Default value is `false`."
        }, {
            "name": "security",
            "type": "Security Requirement Object",
            "changelog": {
                "isNew": true
            },
            "description": "A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. This definition overrides any declared top-level [`security`](#oasSecurity). To remove a top-level security declaration, an empty array can be used."
        }, {
            "name": "servers",
            "type": "Server Object",
            "changelog": {
                "isNew": true
            },
            "description": "An alternative `server` array to service this operation. If an alternative `server` object is specified at the Path Item Object or Root level, it will be overridden by this value."
        }]
    },
    "Parameter Object": {
        "description": "Describes a single operation parameter.\n\nA unique parameter is defined by a combination of a [name](#parameterName) and [location](#parameterIn).\n\nThere are four possible parameter locations specified by the `in` field:\n\n* path - Used together with [Path Templating](#pathTemplating), where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in `/items/{itemId}`, the path parameter is `itemId`.\n* query - Parameters that are appended to the URL. For example, in `/items?id=###`, the query parameter is `id`.\n* header - Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230#page-22) states header names are case insensitive.\n* cookie - Used to pass a specific cookie value to the API.\n",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "- Besides query, header and path parameters, `cookie` parameters can be defined.\n- Body parameters are now defined with a `Request Body Object`.\n- All parameters types (even atomic ones like string or boolean for example) are now defined with a `Schema Object`.\n- Former `formData` parameters (used for media types `application/x-www-form-urlencoded` or `multipart/form-data` are handled with a `Content Object` which allow to define the media type of parameters, request bodies, headers or responses.\n- `Example(s)` can be provided.\n- Parameters can now be `deprecated`.\n- More control on serialization (with `allowReserved`, `style` and `explode`).\n",
            "deletedProperties": [{
                "name": "body",
                "replacedBy": "schema or content.schema",
                "see": "Parameter Object"
            }, {
                "name": "default",
                "replacedBy": "schema.default or content.{media type}.schema.default",
                "see": "Schema Object"
            }, {
                "name": "items",
                "replacedBy": "schema.items or content.{media type}.schema.items",
                "see": "Schema Object"
            }, {
                "name": "collectionFormat",
                "replacedBy": "schema.collectionFormat or content.{media type}.schema.collectionFormat",
                "see": "Schema Object"
            }, {
                "name": "maxItems",
                "replacedBy": "schema.maxItems or content.{media type}.schema.maxItems",
                "see": "Schema Object"
            }, {
                "name": "minItems",
                "replacedBy": "schema.minItems or content.{media type}.schema.minItems",
                "see": "Schema Object"
            }, {
                "name": "uniqueItems",
                "replacedBy": "schema.uniqueItems or content.{media type}.schema.uniqueItems",
                "see": "Schema Object"
            }, {
                "name": "format",
                "replacedBy": "schema.format or content.{media type}.schema.format",
                "see": "Schema Object"
            }, {
                "name": "enum",
                "replacedBy": "schema.enum or content.{media type}.schema.enum",
                "see": "Schema Object"
            }, {
                "name": "pattern",
                "replacedBy": "schema.pattern or content.{media type}.schema.pattern",
                "see": "Schema Object"
            }, {
                "name": "maxLength",
                "replacedBy": "schema.maxLength or content.{media type}.schema.maxLength",
                "see": "Schema Object"
            }, {
                "name": "minLength",
                "replacedBy": "schema.minLength or content.{media type}.schema.minLength",
                "see": "Schema Object"
            }, {
                "name": "maximum",
                "replacedBy": "schema.maximum or content.{media type}.schema.maximum",
                "see": "Schema Object"
            }, {
                "name": "exclusiveMaximum",
                "replacedBy": "schema.exclusiveMaximum or content.{media type}.schema.exclusiveMaximum",
                "see": "Schema Object"
            }, {
                "name": "minimum",
                "replacedBy": "schema.minimum or content.{media type}.schema.minimum",
                "see": "Schema Object"
            }, {
                "name": "exclusiveMinimum",
                "replacedBy": "schema.exclusiveMinimum or content.{media type}.schema.exclusiveMinimum",
                "see": "Schema Object"
            }, {
                "name": "multipleOf",
                "replacedBy": "schema.multipleOf or content.{media type}.schema.multipleOf",
                "see": "Schema Object"
            }]
        },
        "fields": [{
            "name": "name",
            "required": true,
            "type": "string",
            "description": "The name of the parameter. Parameter names are *case sensitive*.\n\n* If [`in`](#parameterIn) is `\"path\"`, the `name` field MUST correspond to the associated path segment from the [path](#pathsPath) field in the [Paths Object](#pathsObject). See [Path Templating](#pathTemplating) for further information.\n* If [`in`](#parameterIn) is `\"header\"` and the `name` field is `\"Accept\"`, `\"Content-Type\"` or `\"Authorization\"`, the parameter definition SHALL be ignored.\n* For all other cases, the `name` corresponds to the parameter name used by the [`in`](#parameterIn) property.\n"
        }, {
            "name": "in",
            "type": "string",
            "required": true,
            "description": "The location of the parameter.",
            "changelog": {
                "isModified": true,
                "details": "`formData` (replaced by the use of a `Content Object`) and `body` (replaced by `Request Body`) values have been removed.\n"
            },
            "values": [{
                "value": "query",
                "description": "Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id."
            }, {
                "value": "header",
                "description": "Custom headers that are expected as part of the request. Note that RFC 7230 states header names are case insensitive."
            }, {
                "value": "path",
                "description": "Used together with Path Templating, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.\n"
            }, {
                "value": "cookie",
                "description": "Used to pass a specific cookie value to the API."
            }]
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "A brief description of the parameter. This could contain examples of use.\n"
        }, {
            "name": "required",
            "type": "boolean",
            "description": "Determines whether this parameter is mandatory. If the [parameter location](#parameterIn) is \"path\", this property is *REQUIRED* and its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n"
        }, {
            "name": "deprecated",
            "type": "boolean",
            "description": "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "allowEmptyValue",
            "type": "boolean",
            "description": "Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a parameter with an empty value. Default value is `false`. If [`style`](#parameterStyle) is used, and if behavior is n/a (cannot be serialized), the value of `allowEmptyValue` SHALL be ignored."
        }, {
            "name": "<using style and schema>",
            "type": "Parameter Object Style Schema",
            "changelog": {
                "isNew": true
            },
            "description": "The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a [`style`](#parameterSchema) and [`schema`](#parameterStyle) can be used to describe the structure and syntax of the parameter."
        }, {
            "name": "<using content>",
            "type": "Parameter Object Content",
            "changelog": {
                "isNew": true
            },
            "description": "For more complex scenarios, the [`content`](#parameterContent) property can define the media type and schema of the parameter. A parameter MUST contain either a `schema` property, or a `content` property, but not both. When example or examples are provided in conjunction with the `schema` object, the example MUST follow the prescribed serialization strategy for the parameter."
        }]
    },
    "Parameter Object Content": {
        "description": "For more complex scenarios, the [`content`](#parameterContent) property can define the media type and schema of the parameter. A parameter MUST contain either a `schema` property, or a `content` property, but not both. When example or examples are provided in conjunction with the `schema` object, the example MUST follow the prescribed serialization strategy for the parameter.",
        "fieldsGroup": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "content",
            "type": "{Media Type Object}",
            "changelog": {
                "isNew": true,
                "details": "Replace operation's `consumes`."
            },
            "description": "A map containing the representations for the parameter. The key is the media type and the value describes it. The map MUST only contain one entry."
        }]
    },
    "Parameter Object Style Schema": {
        "description": "The rules for serialization of the parameter are specified in one of two ways. For simpler scenarios, a [`style`](#parameterSchema) and [`schema`](#parameterStyle) can be used to describe the structure and syntax of the parameter.",
        "fieldsGroup": true,
        "fields": [{
            "name": "style",
            "type": "string",
            "changelog": {
                "isNew": true
            },
            "description": "Describes how the parameter value will be serialized depending on the type of the parameter value. Default values (based on value of `in`): for `query` - `form`; for `path` - `simple`; for `header` - `simple`; for `cookie` - `form`.\n"
        }, {
            "name": "explode",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "When this is true, parameter values of type `array` or `object` generate separate parameters for each value of the array or key-value pair of the map.  For other types of parameters this property has no effect. When [`style`](#parameterStyle) is `form`, the default value is `true`. For all other styles, the default value is `false`."
        }, {
            "name": "allowReserved",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "Determines whether the parameter value SHOULD allow reserved characters, as defined by [RFC3986](https://tools.ietf.org/html/rfc3986#section-2.2) `:/?#[]@!$&'()*+,;=` to be included without percent-encoding. This property only applies to parameters with an `in` value of `query`. The default value is `false`."
        }, {
            "name": "schema",
            "type": "Schema Object",
            "allowReference": true,
            "changelog": {
                "isNew": true
            },
            "description": "The schema defining the type used for the parameter."
        }, {
            "name": "example",
            "type": "Any",
            "allowReference": true,
            "changelog": {
                "isNew": true
            },
            "description": "Example of the media type.  The example SHOULD match the specified schema and encoding properties if present.  The `example` field is mutually exclusive of the `examples` field.  Furthermore, if referencing a `schema` which contains an example, the `example` value SHALL _override_ the example provided by the schema. To represent examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the example with escaping where necessary."
        }, {
            "name": "examples",
            "type": "{Example Object}",
            "allowReference": true,
            "changelog": {
                "isNew": true
            },
            "description": "Examples of the media type.  Each example SHOULD contain a value in the correct format as specified in the parameter encoding.  The `examples` field is mutually exclusive of the `example` field.  Furthermore, if referencing a `schema` which contains an example, the `examples` value SHALL _override_ the example provided by the schema."
        }]
    },
    "Path Item Object": {
        "description": "Describes the operations available on a single path. A Path Item MAY be empty, due to [ACL constraints](#securityFiltering). The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.\n",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "- Enhance resource point of view by adding `summary` and `description` on path level.\n- HTTP methode `trace` has been added (TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information. See [RFC7231](https://tools.ietf.org/html/rfc7231#section-4.3.8).)\n- The `servers` property enhance documentation and test possibilities (also available on top and operation levels).\n"
        },
        "fields": [{
            "name": "summary",
            "type": "string",
            "description": "An optional, string summary, intended to apply to all operations in this path.",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "description",
            "type": "string",
            "description": "An optional, string description, intended to apply to all operations in this path.",
            "md": "CommonMark",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "get",
            "type": "Operation Object",
            "description": "A definition of a GET operation on this path."
        }, {
            "name": "put",
            "type": "Operation Object",
            "description": "A definition of a PUT operation on this path."
        }, {
            "name": "post",
            "type": "Operation Object",
            "description": "A definition of a POST operation on this path."
        }, {
            "name": "delete",
            "type": "Operation Object",
            "description": "A definition of a DELETE operation on this path."
        }, {
            "name": "options",
            "type": "Operation Object",
            "description": "A definition of a OPTIONS operation on this path."
        }, {
            "name": "head",
            "type": "Operation Object",
            "description": "A definition of a HEAD operation on this path."
        }, {
            "name": "patch",
            "type": "Operation Object",
            "description": "A definition of a PATCH operation on this path."
        }, {
            "name": "trace",
            "type": "Operation Object",
            "description": "A definition of a TRACE operation on this path.",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "servers",
            "type": "Server Object",
            "description": "An alternative `server` array to service all operations in this path.",
            "changelog": {
                "isNew": true
            }
        }, {
            "name": "parameters",
            "type": "[Parameter Object]",
            "allowReference": true,
            "description": "A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a [name](#parameterName) and [location](#parameterIn). The list can use the [Reference Object](#referenceObject) to link to parameters that are defined at the [OpenAPI Object's components/parameters](#componentsParameters). \n"
        }]
    },
    "Paths Object": {
        "description": "Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL. The Paths MAY be empty, due to [ACL constraints](#securityFiltering).\n",
        "allowExtension": true,
        "fields": [{
            "name": "/{path}",
            "type": "Path Item Object",
            "required": true,
            "allowReference": true,
            "description": "A relative path to an individual endpoint. The field name MUST begin with a slash. The path is *appended* (no relative URL resolution) to the expanded URL from the `Server Object`'s url field in order to construct the full URL. [Path templating](#pathTemplating) is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. In case of ambiguous matching, it's up to the tooling to decide which one to use.\n"
        }]
    },
    "Reference Object": {
        "name": "$ref",
        "type": "string",
        "description": "A simple object to allow referencing other definitions in the specification. It can be used to reference parameters and responses that are defined at the top level for reuse.\n\nThe Reference Object is a JSON Reference that uses a JSON Pointer as its value. For this specification, only canonical dereferencing is supported.\n\nA simple object to allow referencing other components in the specification, internally and externally.\n\nThe Reference Object is defined by [JSON Reference](https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03) and follows the same structure, behavior and rules. \n\nFor this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.\n\nThis object cannot be extended with additional properties and any properties added SHALL be ignored.\n"
    },
    "Request Body Object": {
        "description": "Describes a single request body.",
        "changelog": {
            "isNew": true,
            "details": "Replace `Parameter Object` with `in = body`."
        },
        "allowExtension": true,
        "fields": [{
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "A brief description of the request body. This could contain examples of use."
        }, {
            "name": "content",
            "type": "Content Object",
            "required": true,
            "description": "The content of the request body. The key is a media type or [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) and the value describes it.  For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*"
        }, {
            "name": "required",
            "type": "boolean",
            "description": "Determines if the request body is required in the request. Defaults to `false`."
        }]
    },
    "Response Object": {
        "description": "Describes a single response from an API Operation, including design-time, static links to operations based on the response.",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "- Better control on media type, response handles returned media type with `content.{mediatype}`. It replaces `produces` definition on `Operation Object` or top level.\n- Enhanced hypermedia design with `links`.\n- Headers are easier to define because they can be defined in `components.headers` and used in `headers`\n",
            "deletedProperties": [{
                "name": "schema",
                "replacedBy": "content.{media type}.schema",
                "see": "Media Type Object"
            }, {
                "name": "example",
                "replacedBy": "content.{media type}.example or content.{media type}.examples",
                "see": "Media Type Object"
            }]
        },
        "fields": [{
            "name": "description",
            "type": "string",
            "isRequired": true,
            "md": "CommonMark",
            "description": "A short description of the response. CommonMark syntax can be used for rich text representation."
        }, {
            "name": "headers",
            "type": "{header name, Header Object}",
            "changelog": {
                "isModified": true,
                "details": "Headers can now be defined in the root `components`"
            },
            "description": "Maps a header name to its definition. [RFC7230](https://tools.ietf.org/html/rfc7230#page-22) states header names are case insensitive. If a response header is defined with the name `\"Content-Type\"`, it SHALL be ignored."
        }, {
            "name": "content",
            "type": "{media type,Media Type Object}",
            "changelog": {
                "isNew": true,
                "details": "Replace `schema` but also `Operation Object.produces` or `Open API Object.produces`"
            },
            "description": "A map containing descriptions of potential response payloads. The key is a media type or [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) and the value describes it.  For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*"
        }, {
            "name": "links",
            "type": "{Link Object}",
            "changelog": {
                "isNew": true
            },
            "description": "A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for [Component Objects](#componentsObject)."
        }]
    },
    "Responses Object": {
        "description": "A container for the expected responses of an operation.\nThe container maps a HTTP response code to the expected response.\n\nThe documentation is not necessarily expected to cover all possible HTTP response codes because they may not be known in advance.\nHowever, documentation is expected to cover a successful operation response and any known errors.\n\nThe `default` MAY be used as a default response object for all HTTP codes \nthat are not covered individually by the specification.\n\nThe `Responses Object` MUST contain at least one response code, and it \nSHOULD be the response for a successful operation call.\n",
        "allowExtension": true,
        "changelog": {
            "isModified": true
        },
        "fields": [{
            "name": "default",
            "allowReference": true,
            "type": "Response Object",
            "description": "The documentation of responses other than the ones declared for specific HTTP response codes. Use this field to cover undeclared responses. A [Reference Object](#referenceObject) can link to a response that the [OpenAPI Object's components/responses](#componentsResponses) section defines."
        }, {
            "name": "{HTTP status code}",
            "allowReference": true,
            "type": "Response Object",
            "changelog": {
                "isModified": true,
                "details": "Wildcard are now allowed (2XX for example)"
            },
            "description": "Any [HTTP status code](#httpCodes) can be used as the property name, but only one property per code, to describe the expected response for that HTTP status code.  A [Reference Object](#referenceObject) can link to a response that is defined in the [OpenAPI Object's components/responses](#componentsResponses) section. This field MUST be enclosed in quotation marks (for example, \"200\") for compatibility between JSON and YAML. To define a range of response codes, this field MAY contain the uppercase wildcard character `X`. For example, `2XX` represents all response codes between `[200-299]`. The following range definitions are allowed: `1XX`, `2XX`, `3XX`, `4XX`, and `5XX`. If a response range is defined using an explicit code, the explicit code definition takes precedence over the range definition for that code.\n"
        }]
    },
    "Schema Object": {
        "description": "The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the [JSON Schema Specification Wright Draft 00](http://json-schema.org/).\n\nFor more information about the properties, see [JSON Schema Core](https://tools.ietf.org/html/draft-wright-json-schema-00) and [JSON Schema Validation](https://tools.ietf.org/html/draft-wright-json-schema-validation-00). Unless stated otherwise, the property definitions follow the JSON Schema.\n\nAlternatively, any time a Schema Object can be used, a [Reference Object](#referenceObject) can be used in its place. This allows referencing definitions instead of defining them inline.\n\nAdditional properties defined by the JSON Schema specification that are not mentioned here are strictly unsupported.\n",
        "allowExtension": true,
        "changelog": {
            "isModified": true,
            "details": "- Enhanced consistency and easier design with extensive use of Schema Object for all definitions (parameters, bodies, responses, headers)\n- [Inheritance and polymorphism](#schemaComposition) mecanism has been enhanced (`oneOf`, `anyOf` and `not` have been added) and clarified (see new `discriminator` behaviour).\n- Creating read/write models is easier with `readOnly` (behaviour modified) and `writeOnly` (new).\n- Enhance versioning thanks to `deprecated`.\n"
        },
        "fields": [{
            "name": "<JSON Schema>",
            "type": "Schema Object JSON",
            "changelog": {
                "isModified": true
            },
            "description": "JSON Schema Properties"
        }, {
            "name": "<OpenAPI>",
            "type": "Schema Object OpenAPI",
            "changelog": {
                "isModified": true
            },
            "description": "Other than the JSON Schema subset fields, the following fields MAY be used for further schema documentation."
        }]
    },
    "Schema Object Array": {
        "description": "Fields if type is array.",
        "fieldsGroup": true,
        "fields": [{
            "name": "items",
            "type": "Schema Object",
            "origin": "JSON Schema",
            "modOrigin": true,
            "allowReference": true,
            "noFollow": true,
            "description": "Value MUST be an object and not an array. Inline or referenced schema MUST be of a [Schema Object](#schemaObject) and not a standard JSON Schema. `items` MUST be present if the `type` is `array`."
        }, {
            "name": "maxItems",
            "type": "number",
            "origin": "JSON Schema",
            "description": "Maximum count of items in array"
        }, {
            "name": "minItems",
            "type": "number",
            "origin": "JSON Schema",
            "description": "Minimum count of items in array."
        }, {
            "name": "uniqueItems",
            "type": "boolean",
            "origin": "JSON Schema",
            "description": "Allow only unique items in array."
        }]
    },
    "Schema Object Composition Inheritance": {
        "description": "See [Discrimitor Object](#discriminatorObject) for complete examples of polymorpism.",
        "fieldsGroup": true,
        "changelog": {
            "isModified": true
        },
        "fields": [{
            "name": "allOf",
            "type": "[Schema Object]",
            "noFollow": true,
            "allowReference": true,
            "modifiedJSONSchema": true,
            "description": "Inline or referenced schema MUST be of a [Schema Object](#schemaObject) and not a standard JSON Schema."
        }, {
            "name": "oneOf",
            "type": "[Schema Object]",
            "noFollow": true,
            "allowReference": true,
            "modifiedJSONSchema": true,
            "changelog": {
                "isNew": true
            },
            "description": "Inline or referenced schema MUST be of a [Schema Object](#schemaObject) and not a standard JSON Schema."
        }, {
            "name": "anyOf",
            "type": "[Schema Object]",
            "noFollow": true,
            "allowReference": true,
            "modifiedJSONSchema": true,
            "changelog": {
                "isNew": true
            },
            "description": "Inline or referenced schema MUST be of a [Schema Object](#schemaObject) and not a standard JSON Schema."
        }, {
            "name": "not",
            "type": "Schema Object",
            "noFollow": true,
            "allowReference": true,
            "modifiedJSONSchema": true,
            "changelog": {
                "isNew": true
            },
            "description": "Inline or referenced schema MUST be of a [Schema Object](#schemaObject) and not a standard JSON Schema."
        }]
    },
    "Schema Object JSON": {
        "description": "The following properties are taken directly from the JSON Schema definition and follow the same specifications",
        "fieldsGroup": true,
        "fields": [{
            "name": "title",
            "type": "string",
            "origin": "JSON Schema",
            "description": "Can be used to decorate a user interface with information about the data produced by this user interface\n\nA title will preferably be short, whereas a description will provide explanation about the purpose of the instance described by this schema.\nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.10.1.\n"
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "origin": "JSON Schema",
            "originMod": true,
            "modifiedJSONSchema": true,
            "description": "Can be used to decorate a user interface with information about the data produced by this user interface\n\nA title will preferably be short, whereas a description will provide explanation about the purpose of the instance described by this schema.\nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.10.1.\n\nOpenAPI modification: CommonMark syntax MAY be used for rich text representation.\n"
        }, {
            "name": "enum",
            "type": "[Any]",
            "origin": "JSON Schema",
            "description": "The value of this keyword MUST be an array. This array SHOULD have at least one element. Elements in the array SHOULD be unique.\n\nAn instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.\n\nElements in the array might be of any value, including null.\n\nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.2\n"
        }, {
            "name": "default",
            "type": "Any",
            "origin": "JSON Schema",
            "originMod": true,
            "description": "The default value represents what would be assumed by the consumer of the input as the value of the schema if one is not provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object defined at the same level. For example, if type is string, then default can be \"foo\" but cannot be 1.\n"
        }, {
            "name": "format",
            "type": "string",
            "origin": "JSON Schema",
            "originMod": true,
            "description": "See [Data Type Formats](#dataTypeFormat) for further details. While relying on JSON Schema's defined formats, the OAS offers a few additional predefined formats.\n\nThe formats defined by the OAS are:\n\nCommon Name | [`type`](#dataTypes) | [`format`](#dataTypeFormat) | Comments\n----------- | ------ | -------- | --------\ninteger | `integer` | `int32` | signed 32 bits\nlong | `integer` | `int64` | signed 64 bits\nfloat | `number` | `float` | |\ndouble | `number` | `double` | |\nstring | `string` | | |\nbyte | `string` | `byte` | base64 encoded characters\nbinary | `string` | `binary` | any sequence of octets\nboolean | `boolean` | | |\ndate | `string` | `date` | As defined by `full-date` - [RFC3339](https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14)\ndateTime | `string` | `date-time` | As defined by `date-time` - [RFC3339](https://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14)\npassword | `string` | `password` | A hint to UIs to obscure input.\n"
        }, {
            "name": "type",
            "type": "string",
            "origin": "JSON Schema",
            "originMod": true,
            "description": "Value MUST be a string. Multiple types via an array are not supported. Note `null`JSON schema type is not supported see [`nullable`](#schemaNullable) property.",
            "values": [{
                "value": "array",
                "description": "A JSON array."
            }, {
                "value": "boolean",
                "description": "A JSON boolean."
            }, {
                "value": "integer",
                "description": "A JSON number without a fraction or exponent part."
            }, {
                "value": "number",
                "description": "Any JSON number. Number includes integer."
            }, {
                "value": "object",
                "description": "A JSON object.",
                "default": true
            }, {
                "value": "string",
                "description": "A JSON string."
            }]
        }, {
            "name": "<type is array>",
            "type": "Schema Object Array",
            "description": "Properties when *type* is *array*"
        }, {
            "name": "<type is string>",
            "type": "Schema Object String",
            "description": "Properties when *type* is *string*"
        }, {
            "name": "<type is number or integer>",
            "type": "Schema Object Number Or Integer",
            "description": "Properties when *type* is *number* or *integer*"
        }, {
            "name": "<type is object>",
            "type": "Schema Object Object",
            "description": "Properties when *type* is *object*"
        }, {
            "name": "<composition and inheritance>",
            "type": "Schema Object Composition Inheritance",
            "description": "Properties to use for composition and inheritance"
        }]
    },
    "Schema Object Number Or Integer": {
        "description": "A number or integer value",
        "fieldsGroup": true,
        "fields": [{
            "name": "maximum",
            "type": "number",
            "origin": "JSON Schema",
            "description": "Maximum value.  \nSee http://json-schema.org/latest/json-schema-validation.html#anchor17.\n"
        }, {
            "name": "exclusiveMaximum",
            "type": "boolean",
            "origin": "JSON Schema",
            "description": "Indicate if the value must be < maximum.  \nSee http://json-schema.org/latest/json-schema-validation.html#anchor17.\n"
        }, {
            "name": "minimum",
            "type": "number",
            "origin": "JSON Schema",
            "description": "Minimum value.  \nSee http://json-schema.org/latest/json-schema-validation.html#anchor21.\n"
        }, {
            "name": "exclusiveMinimum",
            "type": "boolean",
            "origin": "JSON Schema",
            "description": "Indicate if the value must value > minimum.  \nSee http://json-schema.org/latest/json-schema-validation.html#anchor21.\n"
        }, {
            "name": "multipleOf",
            "type": "number",
            "origin": "JSON Schema",
            "description": "The value must be a multiple of *multiplOf*.  \nSee http://json-schema.org/latest/json-schema-validation.html#anchor14.\n"
        }]
    },
    "Schema Object Object": {
        "fieldsGroup": true,
        "description": "type value is object.",
        "fields": [{
            "name": "required",
            "type": "[string]",
            "origin": "JSON Schema",
            "description": "The value of this keyword MUST be an array. Elements of this array, if any, MUST be strings, and MUST be unique.\n\nAn object instance is valid against this keyword if every item in the array is the name of a property in the instance.\n\nOmitting this keyword has the same behavior as an empty array.\n\nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.5.3\n"
        }, {
            "name": "properties",
            "type": "[Schema Object]",
            "origin": "JSON Schema",
            "modOrigin": true,
            "allowReference": true,
            "noFollow": true,
            "description": "Property definitions MUST be a [Schema Object](#schemaObject) and not a standard JSON Schema (inline or referenced)."
        }, {
            "name": "additionalProperties",
            "type": "Schema Object",
            "origin": "JSON Schema",
            "modOrigin": true,
            "allowReference": true,
            "noFollow": true,
            "description": "Value can be boolean or object. Inline or referenced schema MUST be of a [Schema Object](#schemaObject) and not a standard JSON Schema."
        }, {
            "name": "maxProperties",
            "type": "integer",
            "origin": "JSON Schema",
            "description": "An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword."
        }, {
            "name": "minProperties",
            "type": "integer",
            "origin": "JSON Schema",
            "description": "An object instance is valid against \"minProperties\" if its number of properties is greater than, or equal to, the value of this keyword."
        }]
    },
    "Schema Object OpenAPI": {
        "fieldsGroup": true,
        "description": "Other than the JSON Schema subset fields, the following fields may be used for further schema documentation.",
        "fields": [{
            "name": "nullable",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "Allows sending a `null` value for the defined schema. Default value is `false`."
        }, {
            "name": "discriminator",
            "type": "Discriminator Object",
            "changelog": {
                "isModified": true,
                "details": "Composition and inheritance mecanism has been clarified."
            },
            "description": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See [Composition and Inheritance](#schemaComposition) for more details.\n"
        }, {
            "name": "readOnly",
            "type": "boolean",
            "changelog": {
                "isModified": true,
                "details": "Light behavior modification concerning a required property (see description and also the new property `writeOnly`)"
            },
            "description": "Relevant only for Schema `\"properties\"` definitions. Declares the property as \"read only\". This means that it MAY be sent as part of a response but SHOULD NOT be sent as part of the request. If the property is marked as `readOnly` being `true` and is in the `required` list, the `required` will take effect on the response only. A property MUST NOT be marked as both `readOnly` and `writeOnly` being `true`. Default value is `false`.\n"
        }, {
            "name": "writeOnly",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "Relevant only for Schema `\"properties\"` definitions. Declares the property as \"write only\". Therefore, it MAY be sent as part of a request but SHOULD NOT be sent as part of the response. If the property is marked as `writeOnly` being `true` and is in the `required` list, the `required` will take effect on the request only. A property MUST NOT be marked as both `readOnly` and `writeOnly` being `true`. Default value is `false`.\n"
        }, {
            "name": "xml",
            "type": "XML Object",
            "changelog": {
                "isNew": true
            },
            "description": "This MAY be used only on properties schemas. It has no effect on root schemas. Adds additional metadata to describe the XML representation of this property.\n"
        }, {
            "name": "externalDocs",
            "type": "External Documentation Object",
            "description": "Additional external documentation for this schema."
        }, {
            "name": "example",
            "type": "Any",
            "description": "A free-form property to include an example of an instance for this schema."
        }, {
            "name": "deprecated",
            "type": "boolean",
            "changelog": {
                "isNew": true
            },
            "description": "Specifies that a schema is deprecated and SHOULD be transitioned out of usage. Default value is `false`."
        }]
    },
    "Schema Object String": {
        "description": "type value is string",
        "fieldsGroup": true,
        "fields": [{
            "name": "pattern",
            "type": "string",
            "origin": "JSON Schema",
            "description": "This string SHOULD be a valid regular expression, according to the [ECMA 262 regular expression dialect](https://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5).  \nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.3.3.\nSee also [Regex 101](https://regex101.com/) to debug regex.\n"
        }, {
            "name": "maxLength",
            "origin": "JSON Schema",
            "type": "integer",
            "description": "Maximum string's length.  \nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.3.1\n"
        }, {
            "name": "minLength",
            "origin": "JSON Schema",
            "type": "integer",
            "description": "Minimum string's length.  \nSee http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.3.2\n"
        }]
    },
    "Security Requirement Object": {
        "allowExtension": true,
        "description": "Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.\n\nSecurity Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.\n\nWhen a list of Security Requirement Objects is defined on the Open API object or Operation Object, only one of Security Requirement Objects in the list needs to be satisfied to authorize the request.\n",
        "fields": [{
            "name": "{name}",
            "type": "[string]",
            "description": "Each name MUST correspond to a security scheme which is declared in the Security Schemes under the Components Object. If the security scheme is of type \"oauth2\" or \"openIdConnect\", then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty.\n"
        }]
    },
    "Server Object": {
        "description": "An object representing a Server.",
        "allowExtension": true,
        "changelog": {
            "isNew": true,
            "details": "Replace `host`, `basePath` and `schemes` properties from root object."
        },
        "fields": [{
            "name": "url",
            "type": "string",
            "required": true,
            "description": "A URL to the target host. This URL supports Server Variables and may be relative, to indicate that the host location is relative to the location where the OpenAPI definition is being served. Variable substitutions will be made when a variable is named in {brackets}."
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "An optional string describing the host designated by the URL."
        }, {
            "name": "variables",
            "type": "{Variable Name, Server Variable Object}",
            "description": "A map between a variable name and its value. The value is used for substitution in the server's URL template."
        }]
    },
    "Server Variable Object": {
        "description": "An object representing a Server Variable for server URL template substitution.",
        "allowExtension": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "enum",
            "type": "[primitive]",
            "description": "An enumeration of primitive type values to be used if the substitution options are from a limited set."
        }, {
            "name": "default",
            "required": true,
            "type": "primitive",
            "description": "Required. The default value to use for substitution if an alternate value is not specified, and will be sent if an alternative value is not supplied. Unlike the Schema Object's default, this value MUST be provided by the consumer."
        }, {
            "name": "description",
            "type": "string",
            "md": "CommonMark",
            "description": "An optional description for the server variable."
        }]
    },
    "Specification Extensions": {
        "name": "^x-",
        "type": "Any",
        "patterned": true,
        "openapiType": true,
        "specificationAnchor": "specificationExtensions",
        "description": "While the OpenAPI Specification tries to accommodate most use cases, additional data can be added to extend the specification at certain points.\n\nThe extensions properties are implemented as patterned fields that are always prefixed by \"x-\", for example, x-internal-id. The value can be null, a primitive, an array or an object. Can have any valid JSON format value.\n\nThe extensions may or may not be supported by the available tooling, but those may be extended as well to add requested support (if tools are internal or open-sourced).\n"
    },
    "Tag Object": {
        "description": "Adds metadata to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.",
        "allowExtension": true,
        "fields": [{
            "name": "name",
            "type": "string",
            "description": "The name of the tag.",
            "required": true
        }, {
            "name": "description",
            "type": "string",
            "description": "A short description for the tag.",
            "md": "CommonMark"
        }, {
            "name": "externalDocs",
            "type": "External Documentation Object",
            "description": "Additional external documentation for this tag."
        }]
    },
    "XML Object": {
        "description": "A metadata object that allows for more fine-tuned XML model definitions.\n\nWhen using arrays, XML element names are not inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.\n",
        "allowExtension": true,
        "changelog": {
            "isNew": true
        },
        "fields": [{
            "name": "name",
            "type": "string",
            "description": "Replaces the name of the element/attribute used for the described schema property. When defined within `items`, it will affect the name of the individual XML elements within the list. When defined alongside `type` being `array` (outside the `items`), it will affect the wrapping element and only if `wrapped` is `true`. If `wrapped` is `false`, it will be ignored."
        }, {
            "name": "namespace",
            "type": "string",
            "description": "The URI of the namespace definition. Value MUST be in the form of an absolute URI."
        }, {
            "name": "prefix",
            "type": "string",
            "description": "The prefix to be used for the [name](#xmlName)."
        }, {
            "name": "attribute",
            "type": "boolean",
            "description": "Declares whether the property definition translates to an attribute instead of an element. Default value is `false`."
        }, {
            "name": "wrapped",
            "type": "boolean",
            "description": "MAY be used only for an array definition. Signifies whether the array is wrapped (for example, `<books><book/><book/></books>`) or unwrapped (`<book/><book/>`). Default value is `false`. The definition takes effect only when defined alongside `type` being `array` (outside the `items`)."
        }]
    },
    "Z Object": {
        "name": "Test",
        "description": "Test description with a [link](http://apihandyman.io) and another [one](#openapi/).\n",
        "fields": [{
            "name": "required",
            "type": "string",
            "required": true,
            "description": "Test properties with a [link](http://apihandyman.io) and another [one](#openapi/)\n"
        }, {
            "name": "notRequired",
            "type": "string",
            "description": "Non required property"
        }]
    }
}